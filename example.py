# 1.	Дан список. Выведите те его элементы, которые встречаются в списке только один раз.
# Элементы нужно выводить в том порядке, в котором они встречаются в списке.
import random
# a = [random.randint(0,10) for i in range(10)]
# print(a)
# print(*(j for j in a if a.count(j)==1))

# 2.	Дан список чисел. Посчитайте, сколько в нем пар элементов, равных друг другу.
# Например, два одинаковых элемента образуют одну пару, 3 элемента образуют 3 пары, 4 элемента образуют 6 пар и т.д. Воспользуйтесь формулой:
# Количество пар = (Общее число элементов X Общее число элементов — 1) / 2
# a = [random.randint(0,5) for i in range(10)]
# b = []
# for i in a:
#     if a.count(i)>1:
#         if i not in b:
#             b.append(i)
#             print(f'Колличество пар чисел {i} в списке {a}: {a.count(i) * (a.count(i) - 1) // 2}')
# apple1, apple2, apple3, apple4, apple5
# Общее количество пар = 5*(5-1):2=10
# apple1-apple2
# apple1-apple3
# apple1-apple4
# apple1-apple5
#
# apple2-apple3
# apple2-apple4
# apple2-apple5
#
# apple3-apple4
# apple3-apple5
#
# apple4-apple5

# 3.	Даны два кортежа:
# C_1 = (35, 78,21,37, 2,98, 6, 100, 231)
# C_2 = (45, 21,124,76,5,23,91,234)
# Необходимо определить:
# 1)	Сумма элементов какого из кортежей больше и вывести соответствующее сообщение на экран (Сумма больше в кортеже - ..)
# 2)	Вывести на экран порядковые номера минимальных и максимальных элементов этих кортежей (index).

# if sum(C_1)>sum(C_2): print('Сумма в первом кортеже больше')
# else: print('Сумма во втором кортеже больше')

# print('В первом кортеже: ')
# print(C_1.index(min(C_1)), C_1.index(max(C_1)))

# print('Во втором кортеже: ')
# print(C_2.index(min(C_2)),C_2.index(max(C_2)))

# 4.	Создайте словарь из строки ' An apple a day keeps the doctor away' следующим образом: в качестве ключей возьмите символы строки, а значениями пусть будут числа, соответствующие количеству вхождений данной буквы в строку. Заглавные буквы нужно считать строчными. Пробелы не учитывать.
# s = ''.join('An apple a day keeps the doctor away'.lower().split())
# dict = {i:s.count(i) for i in s}
# print(dict)

# 5.	Даны два списка чисел.
# Посчитайте, сколько чисел содержится одновременно как в первом списке, так и во втором.
# a = [random.randint(0,5) for i in range(10)]
# b = [random.randint(0,5) for j in range(10)]
# print(len(set(a)&set(b)))


# 6.	В текстовый файл построчно записаны фамилия и имя учащихся класса
# и его оценка за контрольную.
# Вывести на экран всех учащихся, чья оценка меньше 3 баллов и посчитать средний балл по классу
#
# with open('example.txt', 'r', encoding='utf-8') as f:
#     a = f.readlines()
# print(a)
# sum_mark = 0
# for i in a:
#     i = i.strip().split()
#     sum_mark += int(i[-1])
#     if int(i[-1]) < 3:
#         print(*i)
# print(sum_mark/len(a))




#GIT

#GIT - система контроля версий, с помощью которой можно отслеживать изменения в вашем проекте или файле
#Возможности гита:
#1. Откат проекта

#2. Сравнение и анализ более старой и более новой версий проекта

#3. Загружать ваш проект на удаленный репозиторий на интернет-платформе GitHub

#репозиторий - хранилище, где хранится ваш код и все изменения этого кода (тоже самое, что папка)

#Информация удаленного репозитория хранится на удаленном сервере (например github), локально хранится сам проект
#который можно загрузить на удаленный репозиторий (push - запушить)

#Самые популярные сервисы с удаленным хранилищем:
#GitHub
#BitBacket
#GitLab

#Состояния файлов в Git:
#неотслеживаемое (untracked)
#измененное(modified)
#подготовленное(staged)
#закомиченное(committed)

#Commit (коммит) - основной объект в управлении контроля версий
#он содержит все изменения за время работы именно этого коммита
#Коммиты связаны между собой как односвязный список

#Содержание коммита:
#Номер коммита (id)
#Имя автора коммита
#Дата и время создания коммита
#Комментарий, который описывает, что было сделано во время этого коммита

#Когда лучше делать коммиты:
#создан новый функционал
#исправлены ошибки в коде
#вы завершили рабочий день и хотите сохранить код
#держать ветку в чистоте и порядке

#Ветка - это указатель на какой-то коммит
#Изначально все коммиты приходят в главную ветку master

#Слияние веток (merge)
#Есть главная ветка. От нее в какой-то момент команда программистов создает второстепенную ветку
#в которой тоже будут происходить изменения. После окончания второстепенных изменений можно эту ветку
#слить в основную. То есть из двух веток получить одну - объединить несколько проектов в один.


# GitHub — сервис онлайн-хостинга репозиториев,
# обладающий всеми функциями распределённого контроля версий
# и функциональностью управления исходным кодом.


# dkdf;


